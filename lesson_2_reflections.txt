What happens when you initialize a repository? Why do you need to do it?

    It creats a .git file making a new git repository that start without any
    commits on it. You need to do it otherwise you will not have a git
    repository that you can make commits with to track all your files!

How is the staging area different from the working directory and the repository?
What value do you think it offers?

    Its different from the working directory in that its getting the file(s)
    preped for a commit, seperating the saved commit from the current working
    directory. Its different from the repository because its showing you your
    directory files and how you are about to make a commit with them. Its value
    is that each stage can focus on certain aspects helping to streamline the
    entire operations.

How can you use the staging area to make sure you have one commit per logical
change?

    By using git diff --staged. This will compare the staging area to commit 1
    and show the differneces between files, alowing someone to see if making a
    commit would be enough for a logical change.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

    When you want to experiment with new ideas on the side, you can create a
    branch that you can work on the experiment idea while maintianing the main
    master branch as you continue with your project.

How do the diagrams help you visualize the branch structure?

    By showing you the lay out of the branch structure from a graph point of
    view, instead of the normal linear single branch structure that the git log
    shows.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

    It merges the two branches together to make one branch again, keeping all
    the commits from each branch, ordering them by timestamps. We represent it
    in the diagram to gives us a better visualization for understanding what
    we are doing from a graph point of view. Which can be easier to comprehend
    sometimes compared to viewing the branches in the bash shell.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

    Pros of doing the merging manually is that it gives you a chance to run
    through and make the correct decision when git might make the wrong
    descision. The cons of manual merging is that alot of times git could make
    the right descision anyways so it takes extra time for the user to do it
    themselves. And vice versa for automatic merging.
